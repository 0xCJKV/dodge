pub struct AsciiArtGenerator;

impl AsciiArtGenerator {
    /// Generate ASCII art for a given title
    pub fn generate_ascii_art(title: &str) -> String {
        // Generate fancy block letter ASCII art for any title
        Self::generate_block_letters(title)
    }

    /// Generate block letter ASCII art for any text
    fn generate_block_letters(text: &str) -> String {
        let text = text.to_uppercase();
        let mut lines = vec![String::new(); 6]; // 6 lines for block letters
        
        for ch in text.chars() {
            let letter_lines = Self::get_block_letter(ch);
            for (i, line) in letter_lines.iter().enumerate() {
                if i < lines.len() {
                    lines[i].push_str(line);
                    lines[i].push(' '); // Space between letters
                }
            }
        }
        
        // Remove trailing spaces and join lines
        let result: Vec<String> = lines.iter()
            .map(|line| line.trim_end().to_string())
            .collect();
        
        format!("\n{}\n", result.join("\n"))
    }

    /// Get block letter representation for a single character
    fn get_block_letter(ch: char) -> Vec<&'static str> {
        match ch {
            'A' => vec!["██████╗ ", "██╔══██╗", "███████║", "██╔══██║", "██║  ██║", "╚═╝  ╚═╝"],
            'B' => vec!["██████╗ ", "██╔══██╗", "██████╔╝", "██╔══██╗", "██████╔╝", "╚═════╝ "],
            'C' => vec!["██████╗ ", "██╔════╝", "██║     ", "██║     ", "╚██████╗", " ╚═════╝"],
            'D' => vec!["██████╗ ", "██╔══██╗", "██║  ██║", "██║  ██║", "██████╔╝", "╚═════╝ "],
            'E' => vec!["███████╗", "██╔════╝", "█████╗  ", "██╔══╝  ", "███████╗", "╚══════╝"],
            'F' => vec!["███████╗", "██╔════╝", "█████╗  ", "██╔══╝  ", "██║     ", "╚═╝     "],
            'G' => vec!["██████╗ ", "██╔════╝", "██║  ███╗", "██║   ██║", "╚██████╔╝", " ╚═════╝ "],
            'H' => vec!["██╗  ██╗", "██║  ██║", "███████║", "██╔══██║", "██║  ██║", "╚═╝  ╚═╝"],
            'I' => vec!["██╗", "██║", "██║", "██║", "██║", "╚═╝"],
            'J' => vec!["     ██╗", "     ██║", "     ██║", "██   ██║", "╚█████╔╝", " ╚════╝ "],
            'K' => vec!["██╗  ██╗", "██║ ██╔╝", "█████╔╝ ", "██╔═██╗ ", "██║  ██╗", "╚═╝  ╚═╝"],
            'L' => vec!["██╗     ", "██║     ", "██║     ", "██║     ", "███████╗", "╚══════╝"],
            'M' => vec!["███╗   ███╗", "████╗ ████║", "██╔████╔██║", "██║╚██╔╝██║", "██║ ╚═╝ ██║", "╚═╝     ╚═╝"],
            'N' => vec!["███╗   ██╗", "████╗  ██║", "██╔██╗ ██║", "██║╚██╗██║", "██║ ╚████║", "╚═╝  ╚═══╝"],
            'O' => vec!["██████╗ ", "██╔══██╗", "██║  ██║", "██║  ██║", "╚█████╔╝", " ╚════╝ "],
            'P' => vec!["██████╗ ", "██╔══██╗", "██████╔╝", "██╔═══╝ ", "██║     ", "╚═╝     "],
            'Q' => vec!["██████╗ ", "██╔══██╗", "██║  ██║", "██║ ▄██║", "╚██████╔╝", " ╚═════╝ "],
            'R' => vec!["██████╗ ", "██╔══██╗", "██████╔╝", "██╔══██╗", "██║  ██║", "╚═╝  ╚═╝"],
            'S' => vec!["███████╗", "██╔════╝", "███████╗", "╚════██║", "███████║", "╚══════╝"],
            'T' => vec!["████████╗", "╚══██╔══╝", "   ██║   ", "   ██║   ", "   ██║   ", "   ╚═╝   "],
            'U' => vec!["██╗   ██╗", "██║   ██║", "██║   ██║", "██║   ██║", "╚██████╔╝", " ╚═════╝ "],
            'V' => vec!["██╗   ██╗", "██║   ██║", "██║   ██║", "╚██╗ ██╔╝", " ╚████╔╝ ", "  ╚═══╝  "],
            'W' => vec!["██╗    ██╗", "██║    ██║", "██║ █╗ ██║", "██║███╗██║", "╚███╔███╔╝", " ╚══╝╚══╝ "],
            'X' => vec!["██╗  ██╗", "╚██╗██╔╝", " ╚███╔╝ ", " ██╔██╗ ", "██╔╝ ██╗", "╚═╝  ╚═╝"],
            'Y' => vec!["██╗   ██╗", "╚██╗ ██╔╝", " ╚████╔╝ ", "  ╚██╔╝  ", "   ██║   ", "   ╚═╝   "],
            'Z' => vec!["███████╗", "╚══███╔╝", "  ███╔╝ ", " ███╔╝  ", "███████╗", "╚══════╝"],
            '.' => vec!["   ", "   ", "   ", "   ", "██╗", "╚═╝"],
            ' ' => vec!["    ", "    ", "    ", "    ", "    ", "    "],
            _ => vec!["███╗", "██╔╝", "██║ ", "██║ ", "███╗", "╚══╝"], // Default for unknown chars
        }
    }
}